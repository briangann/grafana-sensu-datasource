{"version":3,"sources":["../src/query_ctrl.js"],"names":["angular","_","QueryCtrl","SensuDatasourceQueryCtrl","$scope","$injector","templateSrv","uiSegmentSrv","scope","sourceTypes","text","value","dimensionTypes","aggregates","aggregates_json","check_subscriptions","clients","client_health_json","client_history","clients_json","events","events_json","event_metrics","event_metrics_json","results_json","results_table","sensu_health_json","silenced_entries_json","stashes_json","filterTypes","type","aggregateModes","clientQueryModes","eventMetricModes","target","clientQueryMode","eventMetricMode","aggregateMode","sourceType","dimensions","dimension","splice","indexOf","panelCtrl","refresh","dimensionsForSourceType","defaultDimensionType","push","name","dimensionType","datasource","dimensionFindValues","then","transformToSegments","filter","filters","filtersForSourceType","defaultFilterType","filterType","filterFindValues","metricFindQuery","onChangeInternal","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAOA,a;;AACAC,O;;AACEC,e,kBAAAA,S;;;;;;;;;;;;;;;;;;;;;0CAGIC,wB;;;AAEX,0CAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,WAA/B,EAA4CC,YAA5C,EAA0D;AAAA;;AAAA,0JAClDH,MADkD,EAC1CC,SAD0C;;AAExD,gBAAKG,KAAL,GAAaJ,MAAb;AACA,gBAAKG,YAAL,GAAoBA,YAApB;AACA,gBAAKD,WAAL,GAAmBA,WAAnB;AACA;AACA,gBAAKG,WAAL,GAAmB,CACjB;AACEC,kBAAM,YADR;AAEEC,mBAAO;AAFT,WADiB,EAKjB;AACED,kBAAM,oBADR;AAEEC,mBAAO;AAFT,WALiB,EASjB;AACED,kBAAM,qBADR;AAEEC,mBAAO;AAFT,WATiB,EAajB;AACED,kBAAM,SADR;AAEEC,mBAAO;AAFT,WAbiB,EAiBjB;AACED,kBAAM,iBADR;AAEEC,mBAAO;AAFT,WAjBiB,EAqBjB;AACED,kBAAM,uBADR;AAEEC,mBAAO;AAFT,WArBiB,EAyBjB;AACED,kBAAM,gBADR;AAEEC,mBAAO;AAFT,WAzBiB,EA6BjB;AACED,kBAAM,QADR;AAEEC,mBAAO;AAFT,WA7BiB,EAiCjB;AACED,kBAAM,gBADR;AAEEC,mBAAO;AAFT,WAjCiB,EAqCjB;AACED,kBAAM,eADR;AAEEC,mBAAO;AAFT,WArCiB,EAyCjB;AACED,kBAAM,oBADR;AAEEC,mBAAO;AAFT,WAzCiB,EA6CjB;AACED,kBAAM,iBADR;AAEEC,mBAAO;AAFT,WA7CiB,EAiDjB;AACED,kBAAM,kBADR;AAEEC,mBAAO;AAFT,WAjDiB,EAqDjB;AACED,kBAAM,cADR;AAEEC,mBAAO;AAFT,WArDiB,EAyDjB;AACED,kBAAM,kBADR;AAEEC,mBAAO;AAFT,WAzDiB,EA6DjB;AACED,kBAAM,SADR;AAEEC,mBAAO;AAFT,WA7DiB,CAAnB;;AAmEA;AACA;AACE;AACA;AACA;AACF,gBAAKC,cAAL,GAAsB;AACpBC,wBAAY,CACZ;AACEH,oBAAM,gBADR;AAEEC,qBAAO;AAFT,aADY,CADQ;AAMpBG,6BAAiB,CACjB;AACEJ,oBAAM,gBADR;AAEEC,qBAAO;AAFT,aADiB,CANG;AAWpBI,iCAAqB,CACrB;AACEL,oBAAM,gBADR;AAEEC,qBAAO;AAFT,aADqB,EAKrB;AACED,oBAAM,YADR;AAEEC,qBAAO;AAFT,aALqB,EASrB;AACED,oBAAM,YADR;AAEEC,qBAAO;AAFT,aATqB,EAarB;AACED,oBAAM,qBADR;AAEEC,qBAAO;AAFT,aAbqB,CAXD;AA4BpBK,qBAAS,CACT;AACEN,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADS,EAKT;AACED,oBAAM,YADR;AAEEC,qBAAO;AAFT,aALS,CA5BW;AAqCpBM,gCAAoB,CACpB;AACEP,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADoB,CArCA;AA0CpBO,4BAAgB,CAChB;AACER,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADgB,CA1CI;AA+CpBQ,0BAAc,CACd;AACET,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADc,EAKd;AACED,oBAAM,YADR;AAEEC,qBAAO;AAFT,aALc,CA/CM;AAwDpBS,oBAAQ,CACR;AACEV,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADQ,EAKR;AACED,oBAAM,YADR;AAEEC,qBAAO;AAFT,aALQ,CAxDY;AAiEpBU,yBAAa,CACb;AACEX,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADa,EAKb;AACED,oBAAM,YADR;AAEEC,qBAAO;AAFT,aALa,CAjEO;AA0EpBW,2BAAe,CACf;AACEZ,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADe,EAKf;AACED,oBAAM,YADR;AAEEC,qBAAO;AAFT,aALe,CA1EK;AAmFpBY,gCAAoB,CACpB;AACEb,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADoB,EAKpB;AACED,oBAAM,YADR;AAEEC,qBAAO;AAFT,aALoB,CAnFA;AA4FpBa,0BAAc,CACd;AACEd,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADc,EAKd;AACED,oBAAM,YADR;AAEEC,qBAAO;AAFT,aALc,CA5FM;AAqGpBc,2BAAe,CACf;AACEf,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADe,EAKf;AACED,oBAAM,YADR;AAEEC,qBAAO;AAFT,aALe,CArGK;AA8GpBe,+BAAmB,CACnB;AACEhB,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADmB,EAKnB;AACED,oBAAM,YADR;AAEEC,qBAAO;AAFT,aALmB,CA9GC;AAuHpBgB,mCAAuB,CACvB;AACEjB,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADuB,EAKvB;AACED,oBAAM,YADR;AAEEC,qBAAO;AAFT,aALuB,CAvHH;AAgIpBiB,0BAAc,CACd;AACElB,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADc,EAKd;AACED,oBAAM,YADR;AAEEC,qBAAO;AAFT,aALc;AAhIM,WAAtB;;AA2IA;AACA,gBAAKkB,WAAL,GAAmB;AACjBhB,wBAAY,CACV;AACEH,oBAAM,kBADR;AAEEC,qBAAO,QAFT;AAGEmB,oBAAM;AAHR,aADU,EAMV;AACEpB,oBAAM,mBADR;AAEEC,qBAAO,SAFT;AAGEmB,oBAAM;AAHR,aANU,EAWV;AACEpB,oBAAM,gBADR;AAEEC,qBAAO,UAFT;AAGEmB,oBAAM;AAHR,aAXU,EAgBV;AACEpB,oBAAM,UADR;AAEEC,qBAAO,IAFT;AAGEmB,oBAAM;AAHR,aAhBU,EAqBV;AACEpB,oBAAM,aADR;AAEEC,qBAAO,OAFT;AAGEmB,oBAAM;AAHR,aArBU,EA0BV;AACEpB,oBAAM,eADR;AAEEC,qBAAO,SAFT;AAGEmB,oBAAM;AAHR,aA1BU,EA+BV;AACEpB,oBAAM,eADR;AAEEC,qBAAO,SAFT;AAGEmB,oBAAM;AAHR,aA/BU,EAoCV;AACEpB,oBAAM,cADR;AAEEC,qBAAO,OAFT;AAGEmB,oBAAM;AAHR,aApCU,CADK;AA2CjBb,gCAAoB,CAChB;AACEP,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADgB,EAKhB;AACED,oBAAM,mBADR;AAEEC,qBAAO;AAFT,aALgB,CA3CH;AAqDjBK,qBAAS,CACL;AACEN,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADK,EAKL;AACED,oBAAM,mBADR;AAEEC,qBAAO;AAFT,aALK,EASL;AACED,oBAAM,OADR;AAEEC,qBAAO;AAFT,aATK,CArDQ;AAmEjBQ,0BAAc,CACV;AACET,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADU,EAKV;AACED,oBAAM,mBADR;AAEEC,qBAAO;AAFT,aALU,EASV;AACED,oBAAM,OADR;AAEEC,qBAAO;AAFT,aATU,CAnEG;AAiFjBS,oBAAQ,CACJ;AACEV,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADI,EAKJ;AACED,oBAAM,mBADR;AAEEC,qBAAO;AAFT,aALI,EASJ;AACED,oBAAM,kBADR;AAEEC,qBAAO;AAFT,aATI,EAaJ;AACED,oBAAM,OADR;AAEEC,qBAAO;AAFT,aAbI,CAjFS;AAmGjBU,yBAAa,CACT;AACEX,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADS,EAKT;AACED,oBAAM,mBADR;AAEEC,qBAAO;AAFT,aALS,EAST;AACED,oBAAM,kBADR;AAEEC,qBAAO;AAFT,aATS,EAaT;AACED,oBAAM,OADR;AAEEC,qBAAO;AAFT,aAbS,CAnGI;AAqHjBW,2BAAe,CACX;AACEZ,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADW,EAKX;AACED,oBAAM,mBADR;AAEEC,qBAAO;AAFT,aALW,EASX;AACED,oBAAM,kBADR;AAEEC,qBAAO;AAFT,aATW,EAaX;AACED,oBAAM,OADR;AAEEC,qBAAO;AAFT,aAbW,CArHE;AAuIjBY,gCAAoB,CAChB;AACEb,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADgB,EAKhB;AACED,oBAAM,mBADR;AAEEC,qBAAO;AAFT,aALgB,EAShB;AACED,oBAAM,kBADR;AAEEC,qBAAO;AAFT,aATgB,EAahB;AACED,oBAAM,OADR;AAEEC,qBAAO;AAFT,aAbgB,CAvIH;AAyJjBa,0BAAc,CACV;AACEd,oBAAM,aADR;AAEEC,qBAAO;AAFT,aADU,EAKV;AACED,oBAAM,mBADR;AAEEC,qBAAO;AAFT,aALU,EASV;AACED,oBAAM,kBADR;AAEEC,qBAAO;AAFT,aATU,EAaV;AACED,oBAAM,OADR;AAEEC,qBAAO;AAFT,aAbU;AAzJG,WAAnB;;AA6KA,gBAAKoB,cAAL,GAAsB,CACpB;AACErB,kBAAM,MADR;AAEEC,mBAAO;AAFT,WADoB,EAKpB;AACED,kBAAM,SADR;AAEEC,mBAAO;AAFT,WALoB,EASpB;AACED,kBAAM,QADR;AAEEC,mBAAO;AAFT,WAToB,EAapB;AACED,kBAAM,kBADR;AAEEC,mBAAO;AAFT,WAboB,EAiBpB;AACED,kBAAM,YADR;AAEEC,mBAAO;AAFT,WAjBoB,EAqBpB;AACED,kBAAM,iBADR;AAEEC,mBAAO;AAFT,WArBoB,EAyBpB;AACED,kBAAM,iBADR;AAEEC,mBAAO;AAFT,WAzBoB,CAAtB;;AA+BA,gBAAKqB,gBAAL,GAAwB,CACtB;AACEtB,kBAAM,MADR;AAEEC,mBAAO;AAFT,WADsB,EAKtB;AACED,kBAAM,OADR;AAEEC,mBAAO;AAFT,WALsB,CAAxB;;AAWA,gBAAKsB,gBAAL,GAAwB,CACtB;AACEvB,kBAAM,YADR;AAEEC,mBAAO;AAFT,WADsB,EAKtB;AACED,kBAAM,eADR;AAEEC,mBAAO;AAFT,WALsB,EAStB;AACED,kBAAM,gBADR;AAEEC,mBAAO;AAFT,WATsB,EAatB;AACED,kBAAM,uBADR;AAEEC,mBAAO;AAFT,WAbsB,EAiBtB;AACED,kBAAM,yBADR;AAEEC,mBAAO;AAFT,WAjBsB,EAqBtB;AACED,kBAAM,eADR;AAEEC,mBAAO;AAFT,WArBsB,EAyBtB;AACED,kBAAM,wBADR;AAEEC,mBAAO;AAFT,WAzBsB,EA6BtB;AACED,kBAAM,sBADR;AAEEC,mBAAO;AAFT,WA7BsB,EAiCtB;AACED,kBAAM,eADR;AAEEC,mBAAO;AAFT,WAjCsB,EAqCtB;AACED,kBAAM,sBADR;AAEEC,mBAAO;AAFT,WArCsB,EAyCtB;AACED,kBAAM,wBADR;AAEEC,mBAAO;AAFT,WAzCsB,EA6CtB;AACED,kBAAM,gBADR;AAEEC,mBAAO;AAFT,WA7CsB,EAiDtB;AACED,kBAAM,wBADR;AAEEC,mBAAO;AAFT,WAjDsB,EAqDtB;AACED,kBAAM,uBADR;AAEEC,mBAAO;AAFT,WArDsB,CAAxB;AA0DA,gBAAKuB,MAAL,CAAYC,eAAZ,GAA8B,MAAKD,MAAL,CAAYC,eAAZ,IAA+B,OAA7D;AACA,gBAAKD,MAAL,CAAYE,eAAZ,GAA8B,MAAKF,MAAL,CAAYE,eAAZ,IAA+B,kBAA7D;;AAEA,gBAAKF,MAAL,CAAYG,aAAZ,GAA4B,MAAKH,MAAL,CAAYG,aAAZ,IAA6B,MAAzD;AACA;AACA,gBAAKH,MAAL,CAAYI,UAAZ,GAAyB,MAAKJ,MAAL,CAAYI,UAAZ,IAA0B,QAAnD;AACA;AACA,gBAAKJ,MAAL,CAAYK,UAAZ,GAAyB,MAAKL,MAAL,CAAYK,UAAZ,IAA0B,EAAnD;AAlfwD;AAmfzD;;AAED;;;;;;;;;0CAKgBC,S,EAAW;AACzB,gBAAI,KAAKN,MAAL,CAAYK,UAAhB,EAA4B;AAC1B,mBAAKL,MAAL,CAAYK,UAAZ,CAAuBE,MAAvB,CAA8B,KAAKP,MAAL,CAAYK,UAAZ,CAAuBG,OAAvB,CAA+BF,SAA/B,CAA9B,EAAyE,CAAzE;AACA,mBAAKG,SAAL,CAAeC,OAAf;AACD;AACF;;;yCAKc;AACb,gBAAI,CAAC,KAAKV,MAAL,CAAYK,UAAjB,EAA6B;AAC3B,mBAAKL,MAAL,CAAYK,UAAZ,GAAyB,EAAzB;AACD;AACD,gBAAIM,0BAA0B,KAAKjC,cAAL,CAAoB,KAAKsB,MAAL,CAAYI,UAAhC,CAA9B;AACA,gBAAIQ,uBAAuBD,wBAAwB,CAAxB,EAA2BlC,KAAtD;AACA,iBAAKuB,MAAL,CAAYK,UAAZ,CAAuBQ,IAAvB,CAA4B;AAC1BC,oBAAM,IADoB;AAE1BrC,qBAAO,IAFmB;AAG1BsC,6BAAeH;AAHW,aAA5B;AAKD;;;6CAOkBN,S,EAAW;AAC5B,gBAAIA,SAAJ,EAAe;AACb;AACA,qBAAO,KAAKU,UAAL,CAAgBC,mBAAhB,CAAoC,KAAKjB,MAAzC,EAAiDM,SAAjD,EACJY,IADI,CACC,KAAK7C,YAAL,CAAkB8C,mBAAlB,CAAsC,IAAtC,CADD,CAAP;AAED;AACF;;;uCAOYC,M,EAAQ;AACnB,gBAAI,KAAKpB,MAAL,CAAYqB,OAAhB,EAAyB;AACvB,mBAAKrB,MAAL,CAAYqB,OAAZ,CAAoBd,MAApB,CAA2B,KAAKP,MAAL,CAAYqB,OAAZ,CAAoBb,OAApB,CAA4BY,MAA5B,CAA3B,EAAgE,CAAhE;AACA,mBAAKX,SAAL,CAAeC,OAAf;AACD;AACF;;;sCAKW;AACV,gBAAI,CAAC,KAAKV,MAAL,CAAYqB,OAAjB,EAA0B;AACxB,mBAAKrB,MAAL,CAAYqB,OAAZ,GAAsB,EAAtB;AACD;AACD,gBAAIC,uBAAuB,KAAK3B,WAAL,CAAiB,KAAKK,MAAL,CAAYI,UAA7B,CAA3B;AACA,gBAAImB,oBAAoBD,qBAAqB,CAArB,EAAwB1B,IAAhD;AACA,iBAAKI,MAAL,CAAYqB,OAAZ,CAAoBR,IAApB,CAAyB;AACvBC,oBAAM,IADiB;AAEvBrC,qBAAO,IAFgB;AAGvB+C,0BAAYD;AAHW,aAAzB;AAKD;;;0CAOeH,M,EAAQ;AACtB,gBAAIA,MAAJ,EAAY;AACV;AACA,qBAAO,KAAKJ,UAAL,CAAgBS,gBAAhB,CAAiC,KAAKzB,MAAtC,EAA8CoB,MAA9C,EACJF,IADI,CACC,KAAK7C,YAAL,CAAkB8C,mBAAlB,CAAsC,IAAtC,CADD,CAAP;AAED;AACF;;;uCAMY;AACX,mBAAO,KAAKH,UAAL,CAAgBU,eAAhB,CAAgC,KAAK1B,MAArC,EACJkB,IADI,CACC,KAAK7C,YAAL,CAAkB8C,mBAAlB,CAAsC,IAAtC,CADD,CAAP;AAEA;AACD;;;8CAMmB;AAClB;AACA,gBAAI,KAAKnB,MAAL,CAAYK,UAAhB,EAA4B;AAC1B,mBAAKL,MAAL,CAAYK,UAAZ,GAAyB,EAAzB;AACD;AACD,iBAAKsB,gBAAL;AACD;;;wCAMa;AACZ,iBAAKA,gBAAL;AACD;;;6CAMkB;AACjB,iBAAKlB,SAAL,CAAeC,OAAf,GADiB,CACS;AAC3B;;;;QA7mB2C1C,S;;;;AAinB9CC,+BAAyB2D,WAAzB,GAAuC,4BAAvC","file":"query_ctrl.js","sourcesContent":["import angular from \"angular\";\nimport _ from \"lodash\";\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport './css/query-editor.css!';\n\nexport class SensuDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, templateSrv, uiSegmentSrv) {\n    super($scope, $injector);\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.templateSrv = templateSrv;\n    // source types for the popdown\n    this.sourceTypes = [\n      {\n        text: 'Aggregates',\n        value: 'aggregates',\n      },\n      {\n        text: 'Aggregates as JSON',\n        value: 'aggregates_json',\n      },\n      {\n        text: 'Check Subscriptions',\n        value: 'check_subscriptions',\n      },\n      {\n        text: 'Clients',\n        value: 'clients',\n      },\n      {\n        text: 'Clients as JSON',\n        value: 'clients_json',\n      },\n      {\n        text: 'Client Health as JSON',\n        value: 'client_health_json',\n      },\n      {\n        text: 'Client History',\n        value: 'client_history',\n      },\n      {\n        text: 'Events',\n        value: 'events',\n      },\n      {\n        text: 'Events as JSON',\n        value: 'events_json',\n      },\n      {\n        text: 'Event Metrics',\n        value: 'event_metrics',\n      },\n      {\n        text: 'Event Metrics JSON',\n        value: 'event_metrics_json',\n      },\n      {\n        text: 'Results as JSON',\n        value: 'results_json',\n      },\n      {\n        text: 'Results as Table',\n        value: 'results_table',\n      },\n      {\n        text: 'Sensu Health',\n        value: 'sensu_health_json',\n      },\n      {\n        text: 'Silenced Entries',\n        value: 'silenced_entries_json',\n      },\n      {\n        text: 'Stashes',\n        value: 'stashes_json',\n      }\n    ];\n\n    // Each source type have different dimensions\n    //   //    name - name of check\n      //    aggregate - name of aggregate\n      //    type (metric|check)\n      //    source - JIT client\n    this.dimensionTypes = {\n      aggregates: [\n      {\n        text: 'Aggregate Name',\n        value: 'aggregateName',\n      }],\n      aggregates_json: [\n      {\n        text: 'Aggregate Name',\n        value: 'aggregateName',\n      }],\n      check_subscriptions: [\n      {\n        text: 'Aggregate Name',\n        value: 'aggregateName',\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      },\n      {\n        text: 'Check Type',\n        value: 'checkType',\n      },\n      {\n        text: 'Source (JIT Client)',\n        value: 'sourceName',\n      }],\n      clients: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      }],\n      client_health_json: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      }],\n      client_history: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      }],\n      clients_json: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      }],\n      events: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName'\n      }],\n      events_json: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName'\n      }],\n      event_metrics: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName'\n      }],\n      event_metrics_json: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName'\n      }],\n      results_json: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      }],\n      results_table: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      }],\n      sensu_health_json: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      }],\n      silenced_entries_json: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      }],\n      stashes_json: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      }]\n    };\n\n    // same\n    this.filterTypes = {\n      aggregates: [\n        {\n          text: 'Number of Checks',\n          value: 'checks',\n          type: 'value'\n        },\n        {\n          text: 'Number of Clients',\n          value: 'clients',\n          type: 'value'\n        },\n        {\n          text: 'State Critical',\n          value: 'critical',\n          type: 'value'\n        },\n        {\n          text: 'State OK',\n          value: 'ok',\n          type: 'value'\n        },\n        {\n          text: 'State Stale',\n          value: 'stale',\n          type: 'value'\n        },\n        {\n          text: 'State Unknown',\n          value: 'unknown',\n          type: 'value'\n        },\n        {\n          text: 'State Warning',\n          value: 'warning',\n          type: 'value'\n        },\n        {\n          text: 'Total Checks',\n          value: 'total',\n          type: 'value'\n        }\n      ],\n      client_health_json: [\n          {\n            text: 'Client Name',\n            value: 'fetch'\n          },\n          {\n            text: 'Client Name RegEx',\n            value: 'regex'\n          }\n      ],\n      clients: [\n          {\n            text: 'Client Name',\n            value: 'fetch'\n          },\n          {\n            text: 'Client Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Field',\n            value: 'field'\n          }\n      ],\n      clients_json: [\n          {\n            text: 'Client Name',\n            value: 'fetch'\n          },\n          {\n            text: 'Client Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Field',\n            value: 'field'\n          }\n      ],\n      events: [\n          {\n            text: 'Client Name',\n            value: 'fetch'\n          },\n          {\n            text: 'Client Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Check Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Field',\n            value: 'field'\n          }\n      ],\n      events_json: [\n          {\n            text: 'Client Name',\n            value: 'fetch'\n          },\n          {\n            text: 'Client Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Check Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Field',\n            value: 'field'\n          }\n      ],\n      event_metrics: [\n          {\n            text: 'Client Name',\n            value: 'fetch'\n          },\n          {\n            text: 'Client Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Check Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Field',\n            value: 'field'\n          }\n      ],\n      event_metrics_json: [\n          {\n            text: 'Client Name',\n            value: 'fetch'\n          },\n          {\n            text: 'Client Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Check Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Field',\n            value: 'field'\n          }\n      ],\n      results_json: [\n          {\n            text: 'Client Name',\n            value: 'fetch'\n          },\n          {\n            text: 'Client Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Check Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Field',\n            value: 'field'\n          }\n      ]\n    };\n\n    this.aggregateModes = [\n      {\n        text: 'List',\n        value: 'list'\n      },\n      {\n        text: 'Clients',\n        value: 'clients'\n      },\n      {\n        text: 'Checks',\n        value: 'checks'\n      },\n      {\n        text: 'Results Critical',\n        value: 'results_critical'\n      },\n      {\n        text: 'Results OK',\n        value: 'results_ok'\n      },\n      {\n        text: 'Results Unknown',\n        value: 'results_unknown'\n      },\n      {\n        text: 'Results Warning',\n        value: 'results_warning'\n      },\n    ];\n\n    this.clientQueryModes = [\n      {\n        text: 'List',\n        value: 'list'\n      },\n      {\n        text: 'Count',\n        value: 'count'\n      }\n    ];\n\n    this.eventMetricModes = [\n      {\n        text: 'All Events',\n        value: 'all_events_count'\n      },\n      {\n        text: 'Active Events',\n        value: 'all_events_count'\n      },\n      {\n        text: 'Critical Count',\n        value: 'critical_count'\n      },\n      {\n        text: 'Critical Active Count',\n        value: 'critical_active_count'\n      },\n      {\n        text: 'Critical Silenced Count',\n        value: 'critical_silenced_count'\n      },\n      {\n        text: 'Warning Count',\n        value: 'warning_count'\n      },\n      {\n        text: 'Warning Silenced Count',\n        value: 'warning_silenced_count'\n      },\n      {\n        text: 'Warning Active Count',\n        value: 'warning_active_count'\n      },\n      {\n        text: 'Unknown Count',\n        value: 'unknown_count'\n      },\n      {\n        text: 'Unknown Active Count',\n        value: 'unknown_active_count'\n      },\n      {\n        text: 'Unknown Silenced Count',\n        value: 'unknown_silenced_count'\n      },\n      {\n        text: 'Silenced Count',\n        value: 'silenced_count'\n      },\n      {\n        text: 'Clients Silenced Count',\n        value: 'clients_silenced_count'\n      },\n      {\n        text: 'Checks Silenced Count',\n        value: 'checks_silenced_count'\n      }\n    ];\n    this.target.clientQueryMode = this.target.clientQueryMode || 'count';\n    this.target.eventMetricMode = this.target.eventMetricMode || 'all_events_count';\n\n    this.target.aggregateMode = this.target.aggregateMode || 'list';\n    // default source type is events\n    this.target.sourceType = this.target.sourceType || 'events';\n    // no dimensions initially\n    this.target.dimensions = this.target.dimensions || [];\n  }\n\n  /**\n   * [removeDimension description]\n   * @param  {[type]} dimension [description]\n   * @return {[type]}           [description]\n   */\n  removeDimension(dimension) {\n    if (this.target.dimensions) {\n      this.target.dimensions.splice(this.target.dimensions.indexOf(dimension), 1);\n      this.panelCtrl.refresh();\n    }\n  }\n\n  /**\n   * [addDimension description]\n   */\n  addDimension() {\n    if (!this.target.dimensions) {\n      this.target.dimensions = [];\n    }\n    var dimensionsForSourceType = this.dimensionTypes[this.target.sourceType];\n    var defaultDimensionType = dimensionsForSourceType[0].value;\n    this.target.dimensions.push({\n      name: null,\n      value: null,\n      dimensionType: defaultDimensionType\n    });\n  }\n\n  /**\n   * [getDimensionValues description]\n   * @param  {[type]} dimension [description]\n   * @return {[type]}           [description]\n   */\n  getDimensionValues(dimension) {\n    if (dimension) {\n      //console.log(\"have a dimension, getting available values\");\n      return this.datasource.dimensionFindValues(this.target, dimension)\n        .then(this.uiSegmentSrv.transformToSegments(true));\n    }\n  }\n\n  /**\n   * [removeFilter description]\n   * @param  {[type]} dimension [description]\n   * @return {[type]}           [description]\n   */\n  removeFilter(filter) {\n    if (this.target.filters) {\n      this.target.filters.splice(this.target.filters.indexOf(filter), 1);\n      this.panelCtrl.refresh();\n    }\n  }\n\n  /**\n   * [addFilter description]\n   */\n  addFilter() {\n    if (!this.target.filters) {\n      this.target.filters = [];\n    }\n    var filtersForSourceType = this.filterTypes[this.target.sourceType];\n    var defaultFilterType = filtersForSourceType[0].type;\n    this.target.filters.push({\n      name: null,\n      value: null,\n      filterType: defaultFilterType\n    });\n  }\n\n  /**\n   * [getFilterValues description]\n   * @param  {[type]} dimension [description]\n   * @return {[type]}           [description]\n   */\n  getFilterValues(filter) {\n    if (filter) {\n      //console.log(\"have a dimension, getting available values\");\n      return this.datasource.filterFindValues(this.target, filter)\n        .then(this.uiSegmentSrv.transformToSegments(true));\n    }\n  }\n\n  /**\n   * [getOptions description]\n   * @return {[type]} [description]\n   */\n  getOptions() {\n    return this.datasource.metricFindQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(true));\n    // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n\n  /**\n   * [sourceTypeChanged description]\n   * @return {[type]} [description]\n   */\n  sourceTypeChanged() {\n    // reset dimensions\n    if (this.target.dimensions) {\n      this.target.dimensions = [];\n    }\n    this.onChangeInternal();\n  }\n\n  /**\n   * [modeChanged description]\n   * @return {[type]} [description]\n   */\n  modeChanged() {\n    this.onChangeInternal();\n  }\n\n  /**\n   * [onChangeInternal description]\n   * @return {[type]} [description]\n   */\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n}\n\nSensuDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}