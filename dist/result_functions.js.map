{"version":3,"sources":["../src/result_functions.js"],"names":["getResultURIs","checkNames","clientNames","URIs","dimensionURI","aClientName","aCheckName","anAggregateName","length","i","push","j","convertResultsToTable","aTarget","responses","response","getResponseForTarget","data","undefined","singleData","rowData","rowInfo","aRow","check","issued","client","name","status","executed","output","type","thresholds","warning","critical","anEvent","datapoints","columns","text","rows","convertResultsToJSON","timestamp","message","convertResultsToDataPoints","target"],"mappings":"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","file":"result_functions.js","sourcesContent":["import { getResponseForTarget } from './common';\n\nfunction getResultURIs(checkNames, clientNames) {\n  var URIs = [];\n  var dimensionURI = '/results';\n  var aClientName = null;\n  var aCheckName = null;\n  var anAggregateName = null;\n  if (clientNames.length) {\n    for (let i = 0; i < clientNames.length; i++) {\n      aClientName = clientNames[i];\n      dimensionURI = '/results/' + aClientName;\n      URIs.push(dimensionURI);\n    }\n  }\n  if ((checkNames.length) && (clientNames.length)) {\n    for (let i = 0; i < clientNames.length; i++) {\n      aClientName = clientNames[i];\n      for (let j = 0; j < checkNames.length; j++) {\n        aCheckName = checkNames[i];\n        dimensionURI = '/results/' + aClientName + '/' + aCheckName;\n        URIs.push(dimensionURI);\n      }\n    }\n  }\n  if (URIs.length === 0) {\n    URIs.push(dimensionURI);\n  }\n  return URIs;\n}\n\nfunction convertResultsToTable(aTarget, responses) {\n  var response = getResponseForTarget(aTarget, responses);\n\n  // the result has no \"datapoints\", need to create it based on the check data\n  // when we have a checkname and a clientName, the response is different, the\n  // data is not an array, but contains the same information, recreate and push\n  if (response.data.length === undefined) {\n    var singleData = response.data;\n    response.data = [];\n    response.data.push(singleData);\n  }\n  // this will be collapsed into table format, where the columns are predefined\n  // and each row is a response formatted to the columns\n  var rowData = [];\n  for (var i = 0; i < response.data.length; i++) {\n    var rowInfo = response.data[i];\n    var aRow = [\n      rowInfo.check.issued * 1000,\n      rowInfo.client,\n      rowInfo.check.name,\n      rowInfo.check.status,\n      rowInfo.check.issued * 1000,\n      rowInfo.check.executed * 1000,\n      rowInfo.check.output,\n      rowInfo.check.type,\n      rowInfo.check.thresholds.warning,\n      rowInfo.check.thresholds.critical\n    ];\n    // now push into rowData\n    rowData.push(aRow);\n  }\n  // collapse everything into data[0]\n  var anEvent = response.data[0];\n  var datapoints = [];\n  datapoints[0] = [anEvent.check.status, (anEvent.check.issued * 1000)];\n  anEvent.datapoints = datapoints;\n  anEvent.type = \"table\";\n  anEvent.columns = [\n    { text: 'Time', type: 'date'},\n    { text: 'client' },\n    { text: 'check.name' },\n    { text: 'check.status' },\n    { text: 'check.issued', type: 'date' },\n    { text: 'check.executed', type: 'date' },\n    { text: 'check.output' },\n    { text: 'check.type' },\n    { text: 'check.thresholds.warning' },\n    { text: 'check.thresholds.critical' }\n  ];\n  anEvent.rows = rowData;\n  // truncate the rest\n  response.data = [anEvent];\n  //var str = JSON.stringify(response, null, 2);\n  //console.log(str);\n  return response;\n}\n\n/*\nResponse come back as:\n{\n\"client\": \"p3-graphite-t1\",\n\"check\": {\n  \"thresholds\": {\n    \"warning\": 120,\n    \"critical\": 180\n  },\n  \"name\": \"keepalive\",\n  \"issued\": 1482067284,\n  \"executed\": 1482067284,\n  \"output\": \"Keepalive sent from client 3 seconds ago\",\n  \"status\": 0,\n  \"type\": \"standard\"\n}\n}\n */\nfunction convertResultsToJSON(aTarget, responses) {\n  var response = getResponseForTarget(aTarget, responses);\n\n  for (var i = 0; i < response.data.length; i++) {\n    var anEvent = response.data[i];\n    var datapoints = [];\n    if (anEvent.check.issued !== undefined) {\n      var data = {\n        timestamp: (anEvent.check.issued * 1000),\n        message: anEvent.check.name,\n        client: anEvent.client,\n        check: {\n          name: anEvent.check.name,\n          issued: (anEvent.check.issued * 1000),\n          executed: (anEvent.check.executed * 1000),\n          output: anEvent.check.output,\n          status: anEvent.check.status,\n          type: anEvent.check.type\n        }\n      };\n      datapoints.push(data);\n      anEvent.datapoints = datapoints;\n      delete anEvent.check;\n      delete anEvent.client;\n      anEvent.type = 'docs';\n    }\n  }\n  //var str = JSON.stringify(response, null, 2);\n  //console.log(str);\n  return response;\n}\n\n/**\n * [convertResultsToDataPoints description]\n * @param  {[type]} response [description]\n * @return {[type]}        [description]\n */\nfunction convertResultsToDataPoints(aTarget, responses) {\n  var response = getResponseForTarget(aTarget, responses);\n\n  // the result has no \"datapoints\", need to create it based on the check data\n  // when we have a checkname and an clientName, the response is different, the\n  // data is not an array, but contains the same information, recreate and push\n  if (response.data.length === undefined) {\n    var singleData = response.data;\n    response.data = [];\n    response.data.push(singleData);\n  }\n  for (var i = 0; i < response.data.length; i++) {\n    var anEvent = response.data[i];\n    //var str = JSON.stringify(anEvent, null, 2);\n    //console.log(str);\n    var datapoints = [];\n    if (anEvent.check.issued !== undefined) {\n      datapoints[0] = [anEvent.check.status, (anEvent.check.issued * 1000)];\n      // the duration is here...\n      // datapoints[0] = [anEvent.check.duration, (anEvent.check.issued * 1000)];\n    }\n    anEvent.datapoints = datapoints;\n    // set the target to be the check name\n    if (anEvent.check.name !== undefined) {\n      anEvent.target = anEvent.check.name;\n    } else {\n      anEvent.target = anEvent.check;\n    }\n  }\n  return response;\n}\n\n\nexport {getResultURIs, convertResultsToTable, convertResultsToDataPoints, convertResultsToJSON};\n"]}