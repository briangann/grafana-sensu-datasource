{"version":3,"sources":["../../src/query_ctrl.js"],"names":["SensuDatasourceQueryCtrl","$scope","$injector","templateSrv","uiSegmentSrv","scope","sourceTypes","text","value","dimensionTypes","aggregates","aggregates_json","check_subscriptions","clients","client_health_json","client_history","clients_json","events","events_json","event_metrics","event_metrics_json","results_json","results_table","sensu_health_json","silenced_entries_json","stashes_json","filterTypes","type","aggregateModes","clientQueryModes","eventMetricModes","target","clientQueryMode","eventMetricMode","aggregateMode","sourceType","dimensions","dimension","splice","indexOf","panelCtrl","refresh","dimensionsForSourceType","defaultDimensionType","push","name","dimensionType","datasource","dimensionFindValues","then","transformToSegments","filter","filters","filtersForSourceType","defaultFilterType","filterType","filterFindValues","metricFindQuery","onChangeInternal","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import angular from \"angular\";\nimport _ from \"lodash\";\nimport { QueryCtrl } from 'app/plugins/sdk';\nimport './css/query-editor.css!';\n\nexport class SensuDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, templateSrv, uiSegmentSrv) {\n    super($scope, $injector);\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.templateSrv = templateSrv;\n    // source types for the popdown\n    this.sourceTypes = [\n      {\n        text: 'Aggregates',\n        value: 'aggregates',\n      },\n      {\n        text: 'Aggregates as JSON',\n        value: 'aggregates_json',\n      },\n      {\n        text: 'Check Subscriptions',\n        value: 'check_subscriptions',\n      },\n      {\n        text: 'Clients',\n        value: 'clients',\n      },\n      {\n        text: 'Clients as JSON',\n        value: 'clients_json',\n      },\n      {\n        text: 'Client Health as JSON',\n        value: 'client_health_json',\n      },\n      {\n        text: 'Client History',\n        value: 'client_history',\n      },\n      {\n        text: 'Events',\n        value: 'events',\n      },\n      {\n        text: 'Events as JSON',\n        value: 'events_json',\n      },\n      {\n        text: 'Event Metrics',\n        value: 'event_metrics',\n      },\n      {\n        text: 'Event Metrics JSON',\n        value: 'event_metrics_json',\n      },\n      {\n        text: 'Results as JSON',\n        value: 'results_json',\n      },\n      {\n        text: 'Results as Table',\n        value: 'results_table',\n      },\n      {\n        text: 'Sensu Health',\n        value: 'sensu_health_json',\n      },\n      {\n        text: 'Silenced Entries',\n        value: 'silenced_entries_json',\n      },\n      {\n        text: 'Stashes',\n        value: 'stashes_json',\n      }\n    ];\n\n    // Each source type have different dimensions\n    //   //    name - name of check\n      //    aggregate - name of aggregate\n      //    type (metric|check)\n      //    source - JIT client\n    this.dimensionTypes = {\n      aggregates: [\n      {\n        text: 'Aggregate Name',\n        value: 'aggregateName',\n      }],\n      aggregates_json: [\n      {\n        text: 'Aggregate Name',\n        value: 'aggregateName',\n      }],\n      check_subscriptions: [\n      {\n        text: 'Aggregate Name',\n        value: 'aggregateName',\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      },\n      {\n        text: 'Check Type',\n        value: 'checkType',\n      },\n      {\n        text: 'Source (JIT Client)',\n        value: 'sourceName',\n      }],\n      clients: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      }],\n      client_health_json: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      }],\n      client_history: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      }],\n      clients_json: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      }],\n      events: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName'\n      }],\n      events_json: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName'\n      }],\n      event_metrics: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName'\n      }],\n      event_metrics_json: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName'\n      }],\n      results_json: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      }],\n      results_table: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      }],\n      sensu_health_json: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      }],\n      silenced_entries_json: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      }],\n      stashes_json: [\n      {\n        text: 'Client Name',\n        value: 'clientName'\n      },\n      {\n        text: 'Check Name',\n        value: 'checkName',\n      }]\n    };\n\n    // same\n    this.filterTypes = {\n      aggregates: [\n        {\n          text: 'Number of Checks',\n          value: 'checks',\n          type: 'value'\n        },\n        {\n          text: 'Number of Clients',\n          value: 'clients',\n          type: 'value'\n        },\n        {\n          text: 'State Critical',\n          value: 'critical',\n          type: 'value'\n        },\n        {\n          text: 'State OK',\n          value: 'ok',\n          type: 'value'\n        },\n        {\n          text: 'State Stale',\n          value: 'stale',\n          type: 'value'\n        },\n        {\n          text: 'State Unknown',\n          value: 'unknown',\n          type: 'value'\n        },\n        {\n          text: 'State Warning',\n          value: 'warning',\n          type: 'value'\n        },\n        {\n          text: 'Total Checks',\n          value: 'total',\n          type: 'value'\n        }\n      ],\n      client_health_json: [\n          {\n            text: 'Client Name',\n            value: 'fetch'\n          },\n          {\n            text: 'Client Name RegEx',\n            value: 'regex'\n          }\n      ],\n      clients: [\n          {\n            text: 'Client Name',\n            value: 'fetch'\n          },\n          {\n            text: 'Client Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Field',\n            value: 'field'\n          }\n      ],\n      clients_json: [\n          {\n            text: 'Client Name',\n            value: 'fetch'\n          },\n          {\n            text: 'Client Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Field',\n            value: 'field'\n          }\n      ],\n      events: [\n          {\n            text: 'Client Name',\n            value: 'fetch'\n          },\n          {\n            text: 'Client Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Check Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Field',\n            value: 'field'\n          }\n      ],\n      events_json: [\n          {\n            text: 'Client Name',\n            value: 'fetch'\n          },\n          {\n            text: 'Client Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Check Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Field',\n            value: 'field'\n          }\n      ],\n      event_metrics: [\n          {\n            text: 'Client Name',\n            value: 'fetch'\n          },\n          {\n            text: 'Client Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Check Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Field',\n            value: 'field'\n          }\n      ],\n      event_metrics_json: [\n          {\n            text: 'Client Name',\n            value: 'fetch'\n          },\n          {\n            text: 'Client Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Check Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Field',\n            value: 'field'\n          }\n      ],\n      results_json: [\n          {\n            text: 'Client Name',\n            value: 'fetch'\n          },\n          {\n            text: 'Client Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Check Name RegEx',\n            value: 'regex'\n          },\n          {\n            text: 'Field',\n            value: 'field'\n          }\n      ]\n    };\n\n    this.aggregateModes = [\n      {\n        text: 'List',\n        value: 'list'\n      },\n      {\n        text: 'Clients',\n        value: 'clients'\n      },\n      {\n        text: 'Checks',\n        value: 'checks'\n      },\n      {\n        text: 'Results Critical',\n        value: 'results_critical'\n      },\n      {\n        text: 'Results OK',\n        value: 'results_ok'\n      },\n      {\n        text: 'Results Unknown',\n        value: 'results_unknown'\n      },\n      {\n        text: 'Results Warning',\n        value: 'results_warning'\n      },\n    ];\n\n    this.clientQueryModes = [\n      {\n        text: 'List',\n        value: 'list'\n      },\n      {\n        text: 'Count',\n        value: 'count'\n      }\n    ];\n\n    this.eventMetricModes = [\n      {\n        text: 'All Events',\n        value: 'all_events_count'\n      },\n      {\n        text: 'Active Events',\n        value: 'all_events_count'\n      },\n      {\n        text: 'Critical Count',\n        value: 'critical_count'\n      },\n      {\n        text: 'Critical Active Count',\n        value: 'critical_active_count'\n      },\n      {\n        text: 'Critical Silenced Count',\n        value: 'critical_silenced_count'\n      },\n      {\n        text: 'Warning Count',\n        value: 'warning_count'\n      },\n      {\n        text: 'Warning Silenced Count',\n        value: 'warning_silenced_count'\n      },\n      {\n        text: 'Warning Active Count',\n        value: 'warning_active_count'\n      },\n      {\n        text: 'Unknown Count',\n        value: 'unknown_count'\n      },\n      {\n        text: 'Unknown Active Count',\n        value: 'unknown_active_count'\n      },\n      {\n        text: 'Unknown Silenced Count',\n        value: 'unknown_silenced_count'\n      },\n      {\n        text: 'Silenced Count',\n        value: 'silenced_count'\n      },\n      {\n        text: 'Clients Silenced Count',\n        value: 'clients_silenced_count'\n      },\n      {\n        text: 'Checks Silenced Count',\n        value: 'checks_silenced_count'\n      }\n    ];\n    this.target.clientQueryMode = this.target.clientQueryMode || 'count';\n    this.target.eventMetricMode = this.target.eventMetricMode || 'all_events_count';\n\n    this.target.aggregateMode = this.target.aggregateMode || 'list';\n    // default source type is events\n    this.target.sourceType = this.target.sourceType || 'events';\n    // no dimensions initially\n    this.target.dimensions = this.target.dimensions || [];\n  }\n\n  /**\n   * [removeDimension description]\n   * @param  {[type]} dimension [description]\n   * @return {[type]}           [description]\n   */\n  removeDimension(dimension) {\n    if (this.target.dimensions) {\n      this.target.dimensions.splice(this.target.dimensions.indexOf(dimension), 1);\n      this.panelCtrl.refresh();\n    }\n  }\n\n  /**\n   * [addDimension description]\n   */\n  addDimension() {\n    if (!this.target.dimensions) {\n      this.target.dimensions = [];\n    }\n    var dimensionsForSourceType = this.dimensionTypes[this.target.sourceType];\n    var defaultDimensionType = dimensionsForSourceType[0].value;\n    this.target.dimensions.push({\n      name: null,\n      value: null,\n      dimensionType: defaultDimensionType\n    });\n  }\n\n  /**\n   * [getDimensionValues description]\n   * @param  {[type]} dimension [description]\n   * @return {[type]}           [description]\n   */\n  getDimensionValues(dimension) {\n    if (dimension) {\n      //console.log(\"have a dimension, getting available values\");\n      return this.datasource.dimensionFindValues(this.target, dimension)\n        .then(this.uiSegmentSrv.transformToSegments(true));\n    }\n  }\n\n  /**\n   * [removeFilter description]\n   * @param  {[type]} dimension [description]\n   * @return {[type]}           [description]\n   */\n  removeFilter(filter) {\n    if (this.target.filters) {\n      this.target.filters.splice(this.target.filters.indexOf(filter), 1);\n      this.panelCtrl.refresh();\n    }\n  }\n\n  /**\n   * [addFilter description]\n   */\n  addFilter() {\n    if (!this.target.filters) {\n      this.target.filters = [];\n    }\n    var filtersForSourceType = this.filterTypes[this.target.sourceType];\n    var defaultFilterType = filtersForSourceType[0].type;\n    this.target.filters.push({\n      name: null,\n      value: null,\n      filterType: defaultFilterType\n    });\n  }\n\n  /**\n   * [getFilterValues description]\n   * @param  {[type]} dimension [description]\n   * @return {[type]}           [description]\n   */\n  getFilterValues(filter) {\n    if (filter) {\n      //console.log(\"have a dimension, getting available values\");\n      return this.datasource.filterFindValues(this.target, filter)\n        .then(this.uiSegmentSrv.transformToSegments(true));\n    }\n  }\n\n  /**\n   * [getOptions description]\n   * @return {[type]} [description]\n   */\n  getOptions() {\n    return this.datasource.metricFindQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(true));\n    // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n\n  /**\n   * [sourceTypeChanged description]\n   * @return {[type]} [description]\n   */\n  sourceTypeChanged() {\n    // reset dimensions\n    if (this.target.dimensions) {\n      this.target.dimensions = [];\n    }\n    this.onChangeInternal();\n  }\n\n  /**\n   * [modeChanged description]\n   * @return {[type]} [description]\n   */\n  modeChanged() {\n    this.onChangeInternal();\n  }\n\n  /**\n   * [onChangeInternal description]\n   * @return {[type]} [description]\n   */\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n}\n\nSensuDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}