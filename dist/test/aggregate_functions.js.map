{"version":3,"sources":["../../src/aggregate_functions.js"],"names":["getAggregateURIs","target","aggregateNames","URIs","dimensionURI","anAggregateName","length","i","aggregateMode","push","convertAggregatesToDataPoints","aTarget","responses","response","getResponseForTarget","data","undefined","singleData","newData","anEvent","checks","checkType","convertEventDataToAggregateModeList","convertEventDataToAggregateModeClient","clients","convertEventDataToAggregateModeChecks","summary","convertEventDataToAggregateModeResults","datapoints","timestamp","Math","floor","Date","now","name","dataSet","aSummary","checkData","check","total","clientName","checkName","clientData","item","results","critical","ok","stale","unknown","warning","convertToAggregateModeClientJSON","convertAggregatesToJSON","aggregateName","dimensions","value","client","aggregate_name","type"],"mappings":"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","file":"aggregate_functions.js","sourcesContent":["/**\n *\n */\n\nfunction getAggregateURIs(target, aggregateNames) {\n  // https://sensuapp.org/docs/0.28/api/aggregates-api.html\n  var URIs = [];\n  var dimensionURI = '/aggregates';\n  var anAggregateName = null;\n  // name, name/clients, name/checks, name/results/severity\n  if (aggregateNames.length) {\n    for (let i = 0; i < aggregateNames.length; i++) {\n      anAggregateName = aggregateNames[i];\n      dimensionURI = '/aggregates/' + anAggregateName;\n      switch (target.aggregateMode) {\n        case 'checks':\n          dimensionURI = '/aggregates/' + anAggregateName + '/checks';\n          break;\n        case 'clients':\n          dimensionURI = '/aggregates/' + anAggregateName + '/clients';\n          break;\n        case 'list':\n          dimensionURI = '/aggregates/' + anAggregateName;\n          break;\n        case 'results_critical':\n          dimensionURI = '/aggregates/' + anAggregateName + '/results/critical';\n          break;\n        case 'results_ok':\n          dimensionURI = '/aggregates/' + anAggregateName + '/results/ok';\n          break;\n        case 'results_unknown':\n          dimensionURI = '/aggregates/' + anAggregateName + '/results/unknown';\n          break;\n        case 'results_warning':\n          dimensionURI = '/aggregates/' + anAggregateName + '/results/warning';\n          break;\n      }\n      URIs.push(dimensionURI);\n    }\n  }\n  if (URIs.length === 0) {\n    URIs.push(dimensionURI);\n  }\n  return URIs;\n}\n\n/**\n * [convertAggregatesToDataPoints description]\n * @param  {[type]} response [description]\n * @return {[type]}        [description]\n */\nfunction convertAggregatesToDataPoints(aTarget, responses) {\n  var response = getResponseForTarget(aTarget, responses);\n  // the result has no \"datapoints\", need to create it based on the check data\n\n  // when we have a checkname and an clientName, the response is different, the\n  // data is not an array, but contains the same information, recreate and push\n  if (response.data.length === undefined) {\n    var singleData = response.data;\n    response.data = [];\n    response.data.push(singleData);\n  }\n  // storage for new data series constructed by aggregate responses\n  var newData = null;\n  for (var i = 0; i < response.data.length; i++) {\n    var anEvent = response.data[i];\n    // checks is defined when the aggregate mode is either \"Clients\" or \"List\"\n    if (anEvent.checks !== undefined) {\n      // create a new block of datapoints for each aggregate result json entry\n      //\n      var checkType = typeof(anEvent.checks);\n      switch (checkType) {\n        case 'number':\n          // checksType is a number, which is an aggregate list response\n          newData = convertEventDataToAggregateModeList(anEvent, newData);\n          break;\n        case 'object':\n          // checkType is an object, which is an aggregate clients response\n          newData = convertEventDataToAggregateModeClient(anEvent, newData);\n          break;\n      }\n      continue;\n    }\n    // clients is defined when the aggregate mode is \"Checks\"\n    if (anEvent.clients !== undefined) {\n      newData = convertEventDataToAggregateModeChecks(anEvent, newData);\n      continue;\n    }\n    // summary is defined when the aggregate mode is \"Results OK/WARNING/CRITICAL/UNKNOWN\"\n    if (anEvent.summary !== undefined) {\n      newData = convertEventDataToAggregateModeResults(anEvent, newData);\n      continue;\n    }\n\n    // this is a simple aggregate response (no mode)\n    var datapoints = [];\n    // timestamp is the query now (just use now)\n    var timestamp = Math.floor(Date.now());\n    datapoints[0] = [0, timestamp];\n    anEvent.datapoints = datapoints;\n    // set the target to be the name of the aggregate\n    anEvent.target = anEvent.name;\n  }\n  if (newData !== null) {\n    // overwrite the old data field with the new expanded set\n    response.data = newData;\n  }\n  return response;\n}\n\nfunction convertEventDataToAggregateModeResults(anEvent, dataSet) {\n  var timestamp = Math.floor(Date.now());\n  if (dataSet === null) {\n    // initialize empty array\n    dataSet = [];\n  }\n  // iterate over the checks\n  for (var i = 0; i < anEvent.summary.length; i++) {\n    var aSummary = anEvent.summary[i];\n    var checkData = {\n      target: anEvent.check,\n      clients: aSummary.clients,\n      datapoints: [\n        [aSummary.total, timestamp]\n      ]\n    };\n    dataSet.push(checkData);\n  }\n  return dataSet;\n}\n// An aggregate checks result has the format\n// {\n//    clients: [\n//      clientName\n//    ],\n//    name: checkName\n// }\nfunction convertEventDataToAggregateModeChecks(anEvent, dataSet) {\n  var timestamp = Math.floor(Date.now());\n  if (dataSet === null) {\n    // initialize empty array\n    dataSet = [];\n  }\n  // iterate over the checks\n  for (var i = 0; i < anEvent.clients.length; i++) {\n    var clientName = anEvent.clients[i];\n    var checkData = {\n      target: anEvent.name,\n      datapoints: [\n        [clientName, timestamp]\n      ]\n    };\n    dataSet.push(checkData);\n  }\n  return dataSet;\n}\n\n// An aggregate clients result has the format\n// {\n//    checks: [\n//      checkName\n//    ],\n//    name: clientName\n// }\nfunction convertEventDataToAggregateModeClient(anEvent, dataSet) {\n  var timestamp = Math.floor(Date.now());\n  if (dataSet === null) {\n    // initialize empty array\n    dataSet = [];\n  }\n  // iterate over the checks\n  for (var i = 0; i < anEvent.checks.length; i++) {\n    var checkName = anEvent.checks[i];\n    var clientData = {\n      target: anEvent.name,\n      datapoints: [\n        [checkName, timestamp]\n      ]\n    };\n    dataSet.push(clientData);\n  }\n  return dataSet;\n}\n// An aggregate list result has the format\n// {\n//   checks: int,\n//   clients: int,\n//   results: {\n//    critical: int,\n//    ok: int,\n//    stale: int,\n//    total: int,\n//    unknown: int,\n//    warning: int\n//   }\n// }\nfunction convertEventDataToAggregateModeList(anEvent, dataSet) {\n  if (dataSet === null) {\n    // initialize empty array\n    dataSet = [];\n  }\n  var timestamp = Math.floor(Date.now());\n  var item = {\n    target: 'checks',\n    datapoints: [\n      [anEvent.checks, timestamp]\n    ]\n  };\n  dataSet.push(item);\n  item = {\n    target: 'clients',\n    datapoints: [\n      [anEvent.clients, timestamp]\n    ]\n  };\n  dataSet.push(item);\n  item = {\n    target: 'critical',\n    datapoints: [\n      [anEvent.results.critical, timestamp]\n    ]\n  };\n  dataSet.push(item);\n  item = {\n    target: 'ok',\n    datapoints: [\n      [anEvent.results.ok, timestamp]\n    ]\n  };\n  dataSet.push(item);\n  item = {\n    target: 'stale',\n    datapoints: [\n      [anEvent.results.stale, timestamp]\n    ]\n  };\n  dataSet.push(item);\n  item = {\n    target: 'total',\n    datapoints: [\n      [anEvent.results.total, timestamp]\n    ]\n  };\n  dataSet.push(item);\n  item = {\n    target: 'unknown',\n    datapoints: [\n      [anEvent.results.unknown, timestamp]\n    ]\n  };\n  dataSet.push(item);\n  item = {\n    target: 'warning',\n    datapoints: [\n      [anEvent.results.warning, timestamp]\n    ]\n  };\n  dataSet.push(item);\n\n  return dataSet;\n}\n\nfunction convertToAggregateModeClientJSON(data, dataSet) {\n  //debugger;\n  var timestamp = Math.floor(Date.now());\n  if (dataSet === null) {\n    // initialize empty array\n    dataSet = [];\n  }\n  // iterate over the checks\n  for (var i = 0; i < data.checks.length; i++) {\n    var checkName = data.checks[i];\n    var clientData = {\n      target: data.name,\n      datapoints: [\n        [checkName, timestamp]\n      ]\n    };\n    dataSet.push(clientData);\n  }\n  return dataSet;\n}\n\n\n/**\n * [convertAggregatesToJSON description]\n * @param  {[type]} response [description]\n * @param  {[type]} aTarget  [description]\n * @return {[type]}          [description]\n */\nfunction convertAggregatesToJSON(aTarget, responses) {\n  var response = getResponseForTarget(aTarget, responses);\n  var aggregateName = \"ALL\";\n  if (aTarget.dimensions.length > 0) {\n    aggregateName = aTarget.dimensions[0].value;\n  }\n  for (var i = 0; i < response.data.length; i++) {\n    var item = response.data[i];\n    var datapoints = [];\n    var data = {\n      client: item.name,\n      checks: item.checks,\n      aggregate_name: aggregateName,\n    };\n    datapoints.push(data);\n    item.datapoints = datapoints;\n    item.type = 'docs';\n  }\n  return response;\n}\n\n\n\nexport {\n  getAggregateURIs,\n  convertAggregatesToDataPoints,\n  convertAggregatesToJSON\n};\n"]}