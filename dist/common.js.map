{"version":3,"sources":["../src/common.js"],"names":["getResponseForTarget","aTarget","responses","response","data","i","length","target","getClientsWithFilter","arrClientNames","filters","aFilter","filterType","j","hasOwnProperty","filterFieldName","fieldVal","filterFieldValueReplaced","indexOf","name","push","value","flags","filterRegexFlags","re","RegExp","filterRegex","test","err","filterMessage"],"mappings":";;;;;AAAA,WAASA,oBAAT,CAA8BC,OAA9B,EAAuCC,SAAvC,EAAkD;AAChD;AACA;AACA;AACA,QAAIC,WAAW;AACbC,YAAM;AADO,KAAf;AAGA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,UAAUE,IAAV,CAAeE,MAAnC,EAA2CD,GAA3C,EAAgD;AAC9C,UAAIH,UAAUE,IAAV,CAAeC,CAAf,EAAkBE,MAAlB,KAA6BN,OAAjC,EAA0C;AACxC;AACAE,iBAASC,IAAT,GAAgBF,UAAUE,IAAV,CAAeC,CAAf,EAAkBF,QAAlB,CAA2BC,IAA3C;AACA;AACD;AACF;AACD,WAAOD,QAAP;AACD;;AAED,WAASK,oBAAT,CAA8BP,OAA9B,EAAuCE,QAAvC,EAAiD;AAC/C,QAAIM,iBAAiB,EAArB;AACA,SAAK,IAAIJ,IAAI,CAAb,EAAgBA,IAAIJ,QAAQS,OAAR,CAAgBJ,MAApC,EAA4CD,GAA5C,EAAiD;AAC/C,UAAIM,UAAUV,QAAQS,OAAR,CAAgBL,CAAhB,CAAd;AACA,cAAQM,QAAQC,UAAhB;AACE,aAAK,OAAL;AACE,eAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIV,SAASC,IAAT,CAAcE,MAAlC,EAA0CO,GAA1C,EAA+C;AAC7C,gBAAIV,SAASC,IAAT,CAAcS,CAAd,EAAiBC,cAAjB,CAAgCH,QAAQI,eAAxC,CAAJ,EAA8D;AAC5D,kBAAIC,WAAWb,SAASC,IAAT,CAAcS,CAAd,EAAiBF,QAAQI,eAAzB,CAAf;AACA,kBAAIC,aAAaL,QAAQM,wBAAzB,EAAmD;AACjD;AACA,oBAAIR,eAAeS,OAAf,CAAuBf,SAASC,IAAT,CAAcS,CAAd,EAAiBM,IAAxC,MAAkD,CAAC,CAAvD,EAA0D;AACxDV,iCAAeW,IAAf,CAAoBjB,SAASC,IAAT,CAAcS,CAAd,EAAiBM,IAArC;AACD;AACF;AACF;AACF;AACD;AACF,aAAK,OAAL;AACE;AACA,eAAK,IAAIN,KAAI,CAAb,EAAgBA,KAAIV,SAASC,IAAT,CAAcE,MAAlC,EAA0CO,IAA1C,EAA+C;AAC7C,gBAAIF,QAAQU,KAAR,KAAkBlB,SAASC,IAAT,CAAcS,EAAd,EAAiBM,IAAvC,EAA6C;AAC3C;AACA,kBAAIV,eAAeS,OAAf,CAAuBf,SAASC,IAAT,CAAcS,EAAd,EAAiBM,IAAxC,MAAkD,CAAC,CAAvD,EAA0D;AACxDV,+BAAeW,IAAf,CAAoBjB,SAASC,IAAT,CAAcS,EAAd,EAAiBM,IAArC;AACD;AACF;AACF;AACD;AACF,aAAK,OAAL;AACE;AACA,cAAI;AACF,gBAAIG,QAAQX,QAAQY,gBAApB;AACA,gBAAIC,KAAK,IAAIC,MAAJ,CAAWd,QAAQe,WAAnB,EAAgCJ,KAAhC,CAAT;AACA;AACA,iBAAK,IAAIT,MAAI,CAAb,EAAgBA,MAAIV,SAASC,IAAT,CAAcE,MAAlC,EAA0CO,KAA1C,EAA+C;AAC7C,kBAAIW,GAAGG,IAAH,CAAQxB,SAASC,IAAT,CAAcS,GAAd,EAAiBM,IAAzB,CAAJ,EAAoC;AAClC;AACA,oBAAIV,eAAeS,OAAf,CAAuBf,SAASC,IAAT,CAAcS,GAAd,EAAiBM,IAAxC,MAAkD,CAAC,CAAvD,EAA0D;AACxDV,iCAAeW,IAAf,CAAoBjB,SAASC,IAAT,CAAcS,GAAd,EAAiBM,IAArC;AACD;AACF;AACF;AACF,WAZD,CAYE,OAAOS,GAAP,EAAY;AACZjB,oBAAQkB,aAAR,GAAwB,4BAAxB;AACD;AACD;AA1CJ;AA4CD;AACD,WAAOpB,cAAP;AACD;;;;;sCAGCT,oB;;sCACAQ,oB","file":"common.js","sourcesContent":["function getResponseForTarget(aTarget, responses) {\n  /*jshint -W087 */\n  //debugger;\n  // find a response that matches the target\n  var response = {\n    data: []\n  };\n  for (let i = 0; i < responses.data.length; i++) {\n    if (responses.data[i].target === aTarget) {\n      // this is the response to convert\n      response.data = responses.data[i].response.data;\n      break;\n    }\n  }\n  return response;\n}\n\nfunction getClientsWithFilter(aTarget, response) {\n  var arrClientNames = [];\n  for (let i = 0; i < aTarget.filters.length; i++) {\n    var aFilter = aTarget.filters[i];\n    switch (aFilter.filterType) {\n      case 'field':\n        for (let j = 0; j < response.data.length; j++) {\n          if (response.data[j].hasOwnProperty(aFilter.filterFieldName)) {\n            let fieldVal = response.data[j][aFilter.filterFieldName];\n            if (fieldVal === aFilter.filterFieldValueReplaced) {\n              // matched field\n              if (arrClientNames.indexOf(response.data[j].name) === -1) {\n                arrClientNames.push(response.data[j].name);\n              }\n            }\n          }\n        }\n        break;\n      case 'fetch':\n        // iterate over all of the data\n        for (let j = 0; j < response.data.length; j++) {\n          if (aFilter.value === response.data[j].name) {\n            // add to list of tracked names\n            if (arrClientNames.indexOf(response.data[j].name) === -1) {\n              arrClientNames.push(response.data[j].name);\n            }\n          }\n        }\n        break;\n      case 'regex':\n        // make sure the regex is valid\n        try {\n          var flags = aFilter.filterRegexFlags;\n          var re = new RegExp(aFilter.filterRegex, flags);\n          // iterate over all of the data\n          for (let j = 0; j < response.data.length; j++) {\n            if (re.test(response.data[j].name)) {\n              // add to list of tracked names\n              if (arrClientNames.indexOf(response.data[j].name) === -1) {\n                arrClientNames.push(response.data[j].name);\n              }\n            }\n          }\n        } catch (err) {\n          aFilter.filterMessage = 'Invalid Regular Expression';\n        }\n        break;\n    }\n  }\n  return arrClientNames;\n}\n\nexport {\n  getResponseForTarget,\n  getClientsWithFilter\n};\n"]}